<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>附录A. 数据包保护样例 on AUTUMN QUICHE</title>
    <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/</link>
    <description>Recent content in 附录A. 数据包保护样例 on AUTUMN QUICHE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9001_Chinese_Translation/Sample_Packet_Protection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A.1. 密钥</title>
      <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.1_Keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.1_Keys/</guid>
      <description>在HKDF-Expand-Label函数的执行期间生成的标签（也就是HkdfLabel.label），以及传给HKDF-Expand函数的参数为：
client in: 00200f746c73313320636c69656e7420696e00
server in: 00200f746c7331332073657276657220696e00
quic key: 00100e746c7331332071756963206b657900
quic iv: 000c0d746c733133207175696320697600
quic hp: 00100d746c733133207175696320687000
初始秘密值是通用的：
initial_secret = HKDF-Extract(initial_salt, cid) = 7db5df06e7a69e432496adedb0085192 3595221596ae2ae9fb8115c1e9ed0a44 
 用于保护客户端数据包的秘密值为：
client_initial_secret = HKDF-Expand-Label(initial_secret, &amp;quot;client in&amp;quot;, &amp;quot;&amp;quot;, 32) = c00cf151ca5be075ed0ebfb5c80323c4 2d6b7db67881289af4008f1f6c357aea key = HKDF-Expand-Label(client_initial_secret, &amp;quot;quic key&amp;quot;, &amp;quot;&amp;quot;, 16) = 1f369613dd76d5467730efcbe3b1a22d iv = HKDF-Expand-Label(client_initial_secret, &amp;quot;quic iv&amp;quot;, &amp;quot;&amp;quot;, 12) = fa044b2f42a3fd3b46fb255c hp = HKDF-Expand-Label(client_initial_secret, &amp;quot;quic hp&amp;quot;, &amp;quot;&amp;quot;, 16) = 9f50449e04a0e810283a1e9933adedd2 
 用于保护服务器数据包的秘密值为：
server_initial_secret = HKDF-Expand-Label(initial_secret, &amp;quot;server in&amp;quot;, &amp;quot;&amp;quot;, 32) = 3c199828fd139efd216c155ad844cc81 fb82fa8d7446fa7d78be803acdda951b key = HKDF-Expand-Label(server_initial_secret, &amp;quot;quic key&amp;quot;, &amp;quot;&amp;quot;, 16) = cf3a5331653c364c88f0f379b6067e37 iv = HKDF-Expand-Label(server_initial_secret, &amp;quot;quic iv&amp;quot;, &amp;quot;&amp;quot;, 12) = 0ac1493ca1905853b0bba03e hp = HKDF-Expand-Label(server_initial_secret, &amp;quot;quic hp&amp;quot;, &amp;quot;&amp;quot;, 16) = c206b8d9b9f0f37644430b490eeaa314</description>
    </item>
    
    <item>
      <title>A.2. 客户端初始数据包</title>
      <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.2_Client_Initial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.2_Client_Initial/</guid>
      <description>客户端会发送初始数据包。该数据包未经保护的载荷中包含着加密帧，以及足够多的填充帧以使得载荷长度达到1162字节：
060040f1010000ed0303ebf8fa56f129 39b9584a3896472ec40bb863cfd3e868 04fe3a47f06a2b69484c000004130113 02010000c000000010000e00000b6578 616d706c652e636f6dff01000100000a 00080006001d00170018001000070005 04616c706e0005000501000000000033 00260024001d00209370b2c9caa47fba baf4559fedba753de171fa71f50f1ce1 5d43e994ec74d748002b000302030400 0d0010000e0403050306030203080408 050806002d00020101001c0002400100 3900320408ffffffffffffffff050480 00ffff07048000ffff08011001048000 75300901100f088394c8f03e51570806 048000ffff 
 在未经保护的头部中，长度字段的值表示着后方数据的总长度，即1182字节：4字节长的数据包号，1162字节长的帧，还有16字节长的认证标签。头部中还包含了连接ID和值为2的数据包号：
c300000001088394c8f03e5157080000449e00000002 
 对载荷进行保护后，其输出密文会被头部保护采样。因为头部中的数据包号被编码为四字节，所以受保护载荷的前16个字节被作为样本（sample），应用在头部保护中：
sample = d1b1c98dd7689fb8ec11d242b123dc9b mask = AES-ECB(hp, sample)[0..4] = 437b9aec36 header[0] ^= mask[0] &amp;amp; 0x0f = c0 header[18..21] ^= mask[1..4] = 7b9aec34 header = c000000001088394c8f03e5157080000449e7b9aec34 
 最后，经保护的数据包的内容为：
c000000001088394c8f03e5157080000 449e7b9aec34d1b1c98dd7689fb8ec11 d242b123dc9bd8bab936b47d92ec356c 0bab7df5976d27cd449f63300099f399 1c260ec4c60d17b31f8429157bb35a12 82a643a8d2262cad67500cadb8e7378c 8eb7539ec4d4905fed1bee1fc8aafba1 7c750e2c7ace01e6005f80fcb7df6212 30c83711b39343fa028cea7f7fb5ff89 eac2308249a02252155e2347b63d58c5 457afd84d05dfffdb20392844ae81215 4682e9cf012f9021a6f0be17ddd0c208 4dce25ff9b06cde535d0f920a2db1bf3 62c23e596d11a4f5a6cf3948838a3aec 4e15daf8500a6ef69ec4e3feb6b1d98e 610ac8b7ec3faf6ad760b7bad1db4ba3 485e8a94dc250ae3fdb41ed15fb6a8e5 eba0fc3dd60bc8e30c5c4287e53805db 059ae0648db2f64264ed5e39be2e20d8 2df566da8dd5998ccabdae053060ae6c 7b4378e846d29f37ed7b4ea9ec5d82e7 961b7f25a9323851f681d582363aa5f8 9937f5a67258bf63ad6f1a0b1d96dbd4 faddfcefc5266ba6611722395c906556 be52afe3f565636ad1b17d508b73d874 3eeb524be22b3dcbc2c7468d54119c74 68449a13d8e3b95811a198f3491de3e7 fe942b330407abf82a4ed7c1b311663a c69890f4157015853d91e923037c227a 33cdd5ec281ca3f79c44546b9d90ca00 f064c99e3dd97911d39fe9c5d0b23a22 9a234cb36186c4819e8b9c5927726632 291d6a418211cc2962e20fe47feb3edf 330f2c603a9d48c0fcb5699dbfe58964 25c5bac4aee82e57a85aaf4e2513e4f0 5796b07ba2ee47d80506f8d2c25e50fd 14de71e6c418559302f939b0e1abd576 f279c4b2e0feb85c1f28ff18f58891ff ef132eef2fa09346aee33c28eb130ff2 8f5b766953334113211996d20011a198 e3fc433f9f2541010ae17c1bf202580f 6047472fb36857fe843b19f5984009dd c324044e847a4f4a0ab34f719595de37 252d6235365e9b84392b061085349d73 203a4a13e96f5432ec0fd4a1ee65accd d5e3904df54c1da510b0ff20dcc0c77f cb2c0e0eb605cb0504db87632cf3d8b4 dae6e705769d1de354270123cb11450e fc60ac47683d7b8d0f811365565fd98c 4c8eb936bcab8d069fc33bd801b03ade a2e1fbc5aa463d08ca19896d2bf59a07 1b851e6c239052172f296bfb5e724047 90a2181014f3b94a4e97d117b4381303 68cc39dbb2d198065ae3986547926cd2 162f40a29f0c3c8745c0f50fba3852e5 66d44575c29d39a03f0cda721984b6f4 40591f355e12d439ff150aab7613499d bd49adabc8676eef023b15b65bfc5ca0 6948109f23f350db82123535eb8a7433 bdabcb909271a6ecbcb58b936a88cd4e 8f2e6ff5800175f113253d8fa9ca8885 c2f552e657dc603f252e1a8e308f76f0 be79e2fb8f5d5fbbe2e30ecadd220723 c8c0aea8078cdfcb3868263ff8f09400 54da48781893a7e49ad5aff4af300cd8 04a6b6279ab3ff3afb64491c85194aab 760d58a606654f9f4400e8b38591356f bf6425aca26dc85244259ff2b19c41b9 f96f3ca9ec1dde434da7d2d392b905dd f3d1f9af93d1af5950bd493f5aa731b4 056df31bd267b6b90a079831aaf579be 0a39013137aac6d404f518cfd4684064 7e78bfe706ca4cf5e9c5453e9f7cfd2b 8b4c8d169a44e55c88d4a9a7f9474241 e221af44860018ab0856972e194cd934</description>
    </item>
    
    <item>
      <title>A.3. 服务器初始数据包</title>
      <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.3_Server_Initial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.3_Server_Initial/</guid>
      <description>作为回应，服务器会发送以下载荷，其中包含一个ACK帧和一个加密帧，并且不包含填充帧：
02000000000600405a020000560303ee fce7f7b37ba1d1632e96677825ddf739 88cfc79825df566dc5430b9a045a1200 130100002e00330024001d00209d3c94 0d89690b84d08a60993c144eca684d10 81287c834d5311bcf32bb9da1a002b00 020304 
 来自服务器的头部包含着一个新的连接ID和一个值为1且被编码至双字节中数据包号：
c1000000010008f067a5502a4262b50040750001 
 对载荷进行保护后，从第三个密文字节起的一段数据被取作头部保护的样本。
sample = 2cd0991cd25b0aac406a5816b6394100 mask = 2ec0d8356a header = cf000000010008f067a5502a4262b5004075c0d9 
 最后，经保护的数据包的内容为：
cf000000010008f067a5502a4262b500 4075c0d95a482cd0991cd25b0aac406a 5816b6394100f37a1c69797554780bb3 8cc5a99f5ede4cf73c3ec2493a1839b3 dbcba3f6ea46c5b7684df3548e7ddeb9 c3bf9c73cc3f3bded74b562bfb19fb84 022f8ef4cdd93795d77d06edbb7aaf2f 58891850abbdca3d20398c276456cbc4 2158407dd074ee 
 </description>
    </item>
    
    <item>
      <title>A.4. 重试数据包</title>
      <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.4_Retry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.4_Retry/</guid>
      <description>这里展示了一个可以被用于响应附录A.2中的初始数据包的重试数据包。完整性检查中使用了了由客户端选择的值为0x8394c8f03e515708的连接ID，但是这个值不会被包含在最终的重试数据包的明文中：
ff000000010008f067a5502a4262b574 6f6b656e04a265ba2eff4d829058fb3f 0f2496ba 
 </description>
    </item>
    
    <item>
      <title>A.5. 使用ChaCha20-Poly1305的短包头数据包</title>
      <link>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.5_ChaCha20-Poly1305_Short_Header_Packet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Sample_Packet_Protection/A.5_ChaCha20-Poly1305_Short_Header_Packet/</guid>
      <description>本例展示了保护短包头数据包时所需的一些步骤。本例使用了AEAD_CHACHA20_POLY1305。
在本例中，TLS生成了一个应用写入秘密值（secret），服务器使用HKDF-Expand-Label从这个秘密值生成四个值：一个密钥（key）、一个IV（iv）、一个头部保护密钥（hp），和一个将被在密钥被更新后使用到的秘密值（ku，但它在本例中没有被使用到）。
secret = 9ac312a7f877468ebe69422748ad00a1 5443f18203a07d6060f688f30f21632b key = HKDF-Expand-Label(secret, &amp;quot;quic key&amp;quot;, &amp;quot;&amp;quot;, 32) = c6d98ff3441c3fe1b2182094f69caa2e d4b716b65488960a7a984979fb23e1c8 iv = HKDF-Expand-Label(secret, &amp;quot;quic iv&amp;quot;, &amp;quot;&amp;quot;, 12) = e0459b3474bdd0e44a41c144 hp = HKDF-Expand-Label(secret, &amp;quot;quic hp&amp;quot;, &amp;quot;&amp;quot;, 32) = 25a282b9e82f06f21f488917a4fc8f1b 73573685608597d0efcb076b0ab7a7a4 ku = HKDF-Expand-Label(secret, &amp;quot;quic ku&amp;quot;, &amp;quot;&amp;quot;, 32) = 1223504755036d556342ee9361d25342 1a826c9ecdf3c7148684b36b714881f9 
 下面展示了保护一个目标连接ID为空的最小数据包时所需的一些步骤。这个数据包仅包含了一个Ping帧（也就是说，载荷是0x01），并且其数据包号为654360564。在本例中，使用长度为3的数据包号编码方式（也就是编码为49140）避免了扩充数据包载荷的需要；如果数据包号被编码至更少的字节中，那么就需要填充帧。
pn = 654360564 # 十进制 nonce = e0459b3474bdd0e46d417eb0 unprotected header = 4200bff4 payload plaintext = 01 payload ciphertext = 655e5cd55c41f69080575d7999c25a5bfb 
 其结果密文的长度是在可能的范围中最小的。在为头部保护采样时，会跳过一个字节。</description>
    </item>
    
  </channel>
</rss>
