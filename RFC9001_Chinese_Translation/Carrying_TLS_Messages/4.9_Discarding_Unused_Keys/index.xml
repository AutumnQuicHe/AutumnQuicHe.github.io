<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4.9. 丢弃不再使用的密钥 on Autumn Navigation</title>
    <link>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/</link>
    <description>Recent content in 4.9. 丢弃不再使用的密钥 on Autumn Navigation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.9.1. 弃用初始密钥</title>
      <link>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.1_Discarding_Initial_Keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.1_Discarding_Initial_Keys/</guid>
      <description>受初始秘密值（详见第5.2章）保护的数据包是不受认证的，这意味着攻击者可以伪造数据包来干扰连接。为了限制这种攻击造成的影响，初始数据包保护密钥相比其他密钥会被更激进地弃用。
开始使用握手数据包就意味着不再需要交换初始数据包，因为只有在接收到所有初始数据包中的加密帧后才能创建握手密钥。因此，客户端必须在首次发送握手数据包时弃用握手密钥，同时服务器必须在首次成功处理握手数据包时弃用初始密钥。在此之后，终端必须不发送初始数据包。
这会丢弃初始密级的丢包恢复状态并且忽略所有未得到处理的初始数据包。</description>
    </item>
    
    <item>
      <title>4.9.2. 弃用握手密钥</title>
      <link>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.2_Discarding_Handshake_Keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.2_Discarding_Handshake_Keys/</guid>
      <description>当TLS的握手已确认（详见第4.1.2章）时，终端必须弃用它的握手密钥。</description>
    </item>
    
    <item>
      <title>4.9.3. 弃用0-RTT密钥</title>
      <link>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.3_Discarding_0-RTT_Keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9001_Chinese_Translation/Carrying_TLS_Messages/4.9_Discarding_Unused_Keys/4.9.3_Discarding_0-RTT_Keys/</guid>
      <description>0-RTT数据包和1-RTT数据包共享同一个数据包号空间，并且客户端在发送了1-RTT数据包后就不会再发送0-RTT数据包（详见第5.6章）。
因此，客户端应该在建立了1-RTT密钥后立即弃用0-RTT密钥，因为在那之后它们不再有任何用处。
除此之外，服务器应该在接收到1-RTT数据包后立即弃用0-RTT密钥。然而，由于数据包乱序的存在，0-RTT数据包可能晚于1-RTT数据包到达。服务器应该暂时保留0-RTT密钥以能够解密乱序数据包而不需要等对端用1-RTT密钥重传其中的数据。在接收到1-RTT数据包后，服务器必须在一段较短的时间内弃用0-RTT密钥；推荐的时长是探测包超时时间（PTO，详见《QUIC恢复》）的三倍大小。如果服务器判断它已经接收到了所有0-RTT数据包，那么它可以提早弃用0-RTT密钥，这可以通过追踪缺失的数据包号来做到。</description>
    </item>
    
  </channel>
</rss>
