<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>21. 关于安全性的考量 on AUTUMN QUICHE</title>
    <link>/RFC9000_Chinese_Translation/Security_Considerations/</link>
    <description>Recent content in 21. 关于安全性的考量 on AUTUMN QUICHE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Security_Considerations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>21.2. 针对握手的拒绝服务攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.2_Handshake_Denial_of_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.2_Handshake_Denial_of_Service/</guid>
      <description>作为一种经加密和认证的传输层协议，QUIC针对拒绝服务提供了诸多保护措施。一旦加密握手完成，QUIC终端就会丢弃绝大多数未经认证的数据包，极大地限制了攻击者介入已建立的连接的能力。
在连接被建立后，QUIC终端可以接受一些未经认证的ICMP数据包（详见第14.2.1章），但是对这些数据包的使用是极度受限的。终端可以接受的另一种数据包是无状态重置（详见第10.3章），它依赖于在令牌被使用前保持令牌的机密性。
在创建连接期间，QUIC提供的保护仅针对不在路径上的攻击。所有的QUIC数据包都包含着能表明终端接收到了来自对端的前序数据包的依据。
在握手期间无法更改地址，所以终端可以丢弃另一条网络路径上接收到的数据包。
在握手期间，源连接ID字段和目标连接ID字段是抵御不在路径上的攻击的主要手段；详见第8.1章。这些字段必须与对端填写的对应字段匹配。除了初始数据包和无状态重置外，终端只接受包含着与终端之前选择的值匹配的目标连接ID字段的数据包。这是为版本协商数据包提供的唯一保护。
初始数据包中的目标连接ID字段是由客户端选择的不可预测的值，它起着额外的作用。传递加密握手消息的数据包会受到密钥的保护，该密钥衍生自此连接ID和由QUIC版本指定的盐。这使得终端在加密握手完成后始终使用一致的计算过程来认证接收到的数据包。未能通过认证的数据包会被丢弃。以这种方式保护数据包能提供一种强有力的保证，保证数据包的发送方接收到了初始数据包并且能够理解它。
这些保护在面对有能力在连接建立前就接收到QUIC数据包的攻击者时并不一定有效。这样的攻击者可能发送出会被QUIC终端接受的数据包。本QUIC版本尝试检测出此类攻击，但是终端应该令连接的建立过程直接失败，而不是试图从中恢复。在握手期间检测出篡改行为的责任主要在于加密握手协议（详见《QUIC-TLS》）。
允许终端使用其他手段来检测出握手被介入的情况并尝试从中恢复。非法数据包可以被其他手段识别出来并被丢弃，不过在本文档中没有推荐什么特别的方法。</description>
    </item>
    
    <item>
      <title>21.3. 放大攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.3_Amplification_Attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.3_Amplification_Attack/</guid>
      <description>攻击者也许有能力在从服务器接收到地址验证令牌（详见第8章）后释放掉它用于接收令牌的IP地址。一段时间后，攻击者可以伪造出相同的地址，并向服务器发起0-RTT连接，但这时该地址指向的会是另一个（受害者）终端。攻击者于是有机会令服务器向受害者发送多达一整个初始拥塞窗口的数据。
服务器应该通过限制地址验证令牌的使用范围与有效期限的方式抵御此类攻击；详见第8.1.3章。</description>
    </item>
    
    <item>
      <title>21.4. 针对乐观ACK的攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.4_Optimistic_ACK_Attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.4_Optimistic_ACK_Attack/</guid>
      <description>会对尚未接收到的数据包进行确认的终端可能使得拥塞控制器允许以超过网络所支持的速率进行发送。要检测此行为，终端可以在发送数据包时跳过某些数据包号。终端在检测到对端的此类行为后可以立即用类型为PROTOCOL_VIOLATION（协议违背）的连接错误来关闭连接；详见第10.2章。</description>
    </item>
    
    <item>
      <title>21.6. 慢速连接攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.6_Slowloris_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.6_Slowloris_Attacks/</guid>
      <description>通常被称为慢速连接攻击（详见《SLOWLORIS》）的攻击方式会尝试打开许多与目标终端的连接并且尽可能长地维持它们。这类攻击可以通过进行最低限度的活动以避免连接因无活动而被关闭的方式攻击某个QUIC终端。其中可能还包含发送少量数据，逐渐打开流量控制窗口从而控制发送者的速率，以及制造能模拟高丢包率的ACK帧。
QUIC部署应该针对慢速连接攻击提供抵御手段，例如扩大服务器允许的最大客户端数量、限制单个IP地址能够创建的连接数量、向连接所允许的最低传输速率施加限制，以及限制终端能够保持连接的时长。</description>
    </item>
    
    <item>
      <title>21.7. 流分段与重组攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.7_Stream_Fragmentation_and_Reassembly_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.7_Stream_Fragmentation_and_Reassembly_Attacks/</guid>
      <description>恶意的攻击者可能有意不发送一部分流数据，使得接收者为那些未发送的数据预留资源。这会造成接收方出现极高的缓存占用并且/或者创建出巨大且低效的数据结构。
恶意的接收者可能有意不确认包含流数据的数据包，为的是强制发送方持续存储未确认的流数据以便重传。
当流量控制窗口与可用内存相关时，针对接收方的攻击就能被抵御。然而，一些接收方会过度占用内存，并且在合计的时候宣告会超过实际可用内存的流量控制偏移值。这种透支策略在终端运行状态良好时能够提高性能，但是会在遭受流分段攻击时使得终端变得脆弱。
QUIC实现应该针对流分段攻击提供抵御手段。其中可以包含避免透支内存、限制持续维护的数据结构的尺寸、延迟组装流帧、实现基于数据重组缺口时长的启发式方法，以及以上措施的各种组合。</description>
    </item>
    
    <item>
      <title>21.8. 流占用攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.8_Stream_Commitment_Attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.8_Stream_Commitment_Attack/</guid>
      <description>恶意的终端可以打开大量的流并耗尽终端的状态。恶意的终端可以在大量连接上重复此过程，就像TCP中的SYN泛洪攻击那样。
通常情况下，客户端会按顺序打开流，就像第2.1章中解释的那样。然而，当短时间内发起多个流时，丢包或乱序会使得打开流的流帧被乱序地接收到。在接收到较高编号的流ID时，接收者需要打开同类型的所有低编号流；详见第3.2章。因此，在一条新连接上，打开了编号为4000000的流就会打开一百万零一条由客户端发起的双向流。
活跃流的数量是由传输参数initial_max_streams_bidi（初始最大双向流数量）和initial_max_streams_uni（初始最大单向流数量）限制的，并会随着接收到的最大流帧而被更新，如第4.6章所述。只要审慎地选择，这些限制就能抵御流占用攻击会产生的效果。然而，将限制设置得过低则会在应用希望打开大量流时影响性能。</description>
    </item>
    
    <item>
      <title>21.9. 来自对端的拒绝服务攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.9_Peer_Denial_of_Service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.9_Peer_Denial_of_Service/</guid>
      <description>QUIC和TLS中的一些帧和消息在某些情况下具有合理用途，但也可以被滥用，使得终端花费大量计算资源却对连接的状态产生不了肉眼可见的影响。
消息还能被用于以简短快捷的方式更改和回退状态数据，例如向流量控制的限制值发送较小的增量更改。
如果计算上的代价比起带宽上的消耗或对状态的影响要大得多，那么这可能使得恶意的对端能够耗尽终端计算资源。
尽管所有消息都有其合理用途，但是QUIC实现应该监视处理过程中在计算上的消耗并且将任何投入巨大却产出低下的数据包处理过程视作潜在的攻击。终端可以用连接错误或数据包的丢弃来响应这种情况。</description>
    </item>
    
    <item>
      <title>21.10. 显式拥塞通知攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.10_Explicit_Congestion_Notification_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.10_Explicit_Congestion_Notification_Attacks/</guid>
      <description>在路径上的攻击者可以操纵IP头部中ECN字段的值来影响发送方的速率。在《RFC3168》中更详细地讨论了操纵方式及其效果。
在受限路径上的攻击者可以拷贝并发送修改过ECN字段的数据包，从而影响发送方的速率。如果重复的数据包会被接收方丢弃，那么攻击者就要使数据包副本与原始数据包竞速，才能使攻击成功。因此，除非IP数据包中至少有一个QUIC数据包被成功处理，否则QUIC终端会忽略IP数据包中的ECN字段；详见第13.4章。</description>
    </item>
    
    <item>
      <title>21.11. 无状态重置泄密</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.11_Stateless_Reset_Oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.11_Stateless_Reset_Oracle/</guid>
      <description>无状态重置会创建一种潜在的拒绝服务攻击，它与TCP重置注入很相似。这种攻击的成功需要攻击者对于连接ID为特定值的连接，具有触发其无状态重置令牌的生成的能力。能够触发终端生成该令牌的攻击者就能重置具有该连接ID的活跃连接。
如果数据包会被路由至共享同一静态密钥的其他实例上——例如，通过改变IP地址或端口——那么攻击者就能令服务器发送无状态重置。要抵御这种形式的拒绝服务攻击，共享用于无状态重置的同一密钥的终端（详见第10.3.2章）必须被妥善安排，从而使具有给定连接ID的数据包总是抵达具有连接状态的那个实例，除非该连接不再处于活跃状态。
更一般地，如果具有相同连接ID的连接在使用相同静态密钥的其他终端上可能处于活跃状态，那么服务器就必须不创建无状态重置。
在服务器集群使用动态负载均衡的情况中，可能出现对负载均衡器配置进行了更改而活跃的实例仍维护着连接状态的现象。即使某个实例维护着连接状态，路由和作为结果的无状态重置的变化会使得连接被终止。如果数据包没有机会被路由到正确的实例上，那么比起等待连接超时，最好发送无状态重置。然而，该做法只有在攻击者无法影响到路由的情况下才能被使用。</description>
    </item>
    
    <item>
      <title>21.12. 版本降级</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.12_Version_Downgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.12_Version_Downgrade/</guid>
      <description>本文档定义了QUIC的版本协商包（详见第6章），它能被用于协商在两个终端间使用的QUIC版本。然而，本文档没有规定在本版本与后续版本之间如何进行协商。尤其是，版本协商数据包中并不包含任何能阻止版本降级攻击的机制。将来的使用版本协商数据包的QUIC版本必须定义一种针对版本降级攻击的健壮的防御机制。</description>
    </item>
    
    <item>
      <title>21.13. 通过路由的定向攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.13_Targeted_Attacks_by_Routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.13_Targeted_Attacks_by_Routing/</guid>
      <description>QUIC部署应该限制攻击者将新连接定向至特定服务器实例的能力。理想情况下，路由决策应该与客户端的相关值无关，包括地址。一旦选定了某个实例，就能决定连接ID，以便将来的数据包都被路由至同一实例。</description>
    </item>
    
    <item>
      <title>21.14. 流量分析</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/21.14_Traffic_Analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/21.14_Traffic_Analysis/</guid>
      <description>QUIC数据包的长度会透露出有关这些数据包内容长度的信息。填充帧给予了终端混淆数据包内容长度的能力；详见第19.1章。
对流量分析的防御是充满挑战的，并且是很多积极研究的主题。长度不是唯一会泄露信息的途径。终端还可能通过其他侧信道泄露敏感信息，例如数据包的计时侧信道。</description>
    </item>
    
  </channel>
</rss>
