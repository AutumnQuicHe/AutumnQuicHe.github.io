<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>21.1.1. 握手 on Autumn Navigation</title>
    <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/</link>
    <description>Recent content in 21.1.1. 握手 on Autumn Navigation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>21.1.1.1. 抗放大</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.1_Anti-Amplification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.1_Anti-Amplification/</guid>
      <description>地址验证（详见第8章）被用于验证声称位于某个地址的实体是否有在那个地址接收数据包的能力。对于一些地址，攻击者能够观测到发向这些地址的数据包，而地址验证能限制针对这些地址的放大攻击。
在完成地址验证前，终端在能够发送的数据量上会受到限制。终端向未经验证的地址发送的数据量不能超过从那个地址接收到的数据量的三倍。
 注意：抗放大限制仅适用于终端对接收自未经验证地址的数据包进行响应的情况。抗放大限制不适用于客户端建立新连接或发起连接迁移的情况。
 </description>
    </item>
    
    <item>
      <title>21.1.1.2. 针对服务器的拒绝服务</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.2_Server-Side_DoS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.2_Server-Side_DoS/</guid>
      <description>服务器为完整的握手过程计算首轮数据可能需要耗费大量资源，其中需要涉及签名和密钥交换的计算。为了抵御针对计算资源的拒绝服务攻击，重试数据包提供了一种低成本的令牌交换机制，使得服务器能够以单轮数据包往返的代价，在进行大量计算前先验证客户端的IP地址。在成功完成握手后，服务器可以向客户端签发新令牌，这使得下次建立连接时不需要引入上述代价。</description>
    </item>
    
    <item>
      <title>21.1.1.3. 在路径上的握手终止</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.3_On-Path_Handshake_Termination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.3_On-Path_Handshake_Termination/</guid>
      <description>在路径上的或不在路径上的攻击者都可以通过替换或竞速初始数据包的方式强制握手失败。一旦合法的初始数据包完成交换，后续的握手数据包就会受到握手密钥的保护，于是在路径上的攻击者就不能再强制握手失败，除非它丢弃掉数据包从而使得终端放弃尝试连接。
在路径上的攻击者还可以替换任意一侧的数据包中的地址，从而使得客户端或服务器得知虚假的远程地址。这样的攻击无法与NAT进行的转换相区分。</description>
    </item>
    
    <item>
      <title>21.1.1.4. 参数协商</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.4_Parameter_Negotiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Handshake/21.1.1.4_Parameter_Negotiation/</guid>
      <description>整个握手都受到加密保护，其中初始数据包被由QUIC版本指定的密钥加密，握手数据包和后续数据包被衍生自TLS密钥交换的密钥加密。此外，参数协商会被包含在TLS的记录单（transcript）中，因此它与普通的TLS协商提供相同的完整性保证。攻击者可以观测客户端的传输参数（只要它知道那个由QUIC版本指定的盐），但是却不能观测到服务器的传输参数，因此无法影响到参数协商。
连接ID不会被加密，但是会在所有数据包中受到完整性保护。
本QUIC版本中不包含版本协商机制；互不兼容的版本的实现之间无法建立连接。</description>
    </item>
    
  </channel>
</rss>
