<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>21.1.3. 连接迁移 on AUTUMN QUICHE</title>
    <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/</link>
    <description>Recent content in 21.1.3. 连接迁移 on AUTUMN QUICHE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>21.1.3.1. 在路径上的主动攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.1_On-Path_Active_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.1_On-Path_Active_Attacks/</guid>
      <description>能够令观测到的数据包抵达不了它原本目的地的攻击者被认为是在路径上的攻击者。当客户端和服务器间存在攻击者时，终端为了在给定路径上建立连接，发送的数据包不得不经过此攻击者。
在路径上的攻击者可以做到：
  检视数据包
  修改IP数据包和UDP数据包头部
  注入新数据包
  使数据包延误
  对数据包重新排序
  丢弃数据包
  拆分与合并数据报和数据包
  在路径上的攻击者不能做到：
 既修改数据包中经认证的部分又使得接收方接收该数据包。  在路径上的攻击者有修改它观测到的数据包的机会；然而，对于数据包中经认证部分的任何修改都会使得它被接收方认定为非法而遭到丢弃，因为数据包载荷是经过认证与加密的。
QUIC旨在将在路径上的攻击者的能力限制至：
  在路径上的攻击者可以阻止将一条路径用于建立连接，如果终端找不到一条不包含攻击者的路径，连接就会失败。这可以通过丢弃所有数据包、修改数据包以使得它们无法通过解密或其他方式来做到。
  在路径上的攻击者可以通过使新路径上的地址验证失败的方式，阻止连接迁移到一条依旧包含攻击者的路径上。
  在路径上的攻击者不能阻止客户端迁移到一条不包含攻击者的路径上。
  在路径上的攻击者可以通过使数据包延误或丢弃数据包的方式，降低连接的吞吐量。
  在路径上的攻击者不能令终端接受一个被它修改过经认证部分的数据包。
  </description>
    </item>
    
    <item>
      <title>21.1.3.2. 不在路径上的主动攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.2_Off-Path_Active_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.2_Off-Path_Active_Attacks/</guid>
      <description>不在路径上的攻击者并不直接位于客户端与服务器间的路径上，但是拥有获得客户端与服务器间发送的部分或全部数据包的能力。它还能够将那些数据包的副本发送给任一终端。
不在路径上的攻击者可以做到：
  检视数据包
  注入新数据包
  对注入的数据包重新排序
  不在路径上的攻击者不能做到：
  修改由终端发送的数据包
  使数据包延误
  丢弃数据包
  对原始数据包重新排序
  不在路径上的攻击者可以为它观测到的数据包创建修改过的副本，并将这些副本注入网络中，副本的源地址和目标地址可以是伪造的。
在本讨论中，我们假定不在路径上的攻击者具有将修改后的数据包副本注入到网络中的能力，并且这个数据包会比它观测的那个原始数据包更早抵达目标终端。换句话说，攻击者具有持续“赢下”与原始数据包间的竞速的能力，并使得原始数据包被接收方忽略。
我们还假设了攻击者具有影响NAT状态所需的资源。尤其是，攻击者有能力使某终端丢失它的NAT绑定，然后取代它，使用与终端先前所使用的相同的端口来吞吐流量。
QUIC旨在将不在路径上的攻击者的能力限制至：
  不在路径上的攻击者可以竞速数据包并尝试成为在“受限”路径上的攻击者。
  不在路径上的攻击者可以通过转发数据包并将源地址改为自己的地址的方式，使自己的地址通过验证，前提是它可以在客户端和服务器间提供更优秀的连接质量。
  不在路径上的攻击者不能在握手完成后引发连接关闭。
  不在路径上的攻击者不能在无法观测新路径的条件下使得连接迁移到这条路径上。
  不在路径上的攻击者可以在迁移到新路径的期间成为一个在受限路径上的攻击者，而它在新路径上仍是一个不在路径上的攻击者。
  不在路径上的攻击者可以通过影响与客户端共享的NAT状态的方式成为一个在受限路径上的攻击者，以便从客户端曾使用过的IP地址和端口向服务器发送数据包。
  </description>
    </item>
    
    <item>
      <title>21.1.3.3. 在受限路径上的主动攻击</title>
      <link>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.3_Limited_On-Path_Active_Attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Security_Considerations/Overview_of_Security_Properties/Connection_Migration/21.1.3.3_Limited_On-Path_Active_Attacks/</guid>
      <description>在受限路径上的攻击者指的是一个通过在服务器和客户端间复制并转发原始数据包的方式提供更优秀路由质量的不在路径上的攻击者，这会使得那些数据包比原始数据包要更早抵达，从而令原始数据包被目标终端丢弃。
在受限路径上的攻击者与在路径上的攻击者的不同之处在于它并不在终端间的原始路径上，因此由终端发送的原始数据包仍然在前往它们目的地的途中。这意味着只要没有将数据包副本更快地路由到目的地，就无法阻止原始数据包抵达目的地。
在受限路径上的攻击者可以做到：
  检视数据包
  注入新数据包
  修改未经加密的数据包头部
  对数据包重新排序
  在受限路径上的攻击者不能做到：
  使数据包延误，从而令它们比在原始路径上发送的数据包更晚抵达
  丢弃数据包
  修改数据包中经认证和加密的部分，并使得接收方接受该数据包
  在受限路径上的攻击者只能够使数据包副本延误至原始数据包抵达为止，这意味着它不能提供比原始路径的延迟表现要差的路由质量。就算在受限路径上的攻击者将数据包副本丢弃，原始数据包仍然会抵达目标终端。
QUIC旨在将在受限路径上的攻击者的能力限制至：
  在受限路径上的攻击者不能在握手完成后引发连接关闭。
  在受限路径上的攻击者不能在客户端首先恢复活动的条件下引发空闲连接的关闭。
  在受限路径上的攻击者可以在服务器首先恢复活动的条件下使得空闲连接被认定为丢失。
  注意，出于完全相同的原因，这些保证与任何NAT所提供的保证是一致的。</description>
    </item>
    
  </channel>
</rss>
