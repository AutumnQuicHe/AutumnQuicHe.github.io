<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>17. 数据包格式 on AUTUMN QUICHE</title>
    <link>/RFC9000_Chinese_Translation/Packet_Formats/</link>
    <description>Recent content in 17. 数据包格式 on AUTUMN QUICHE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Packet_Formats/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>17.1 数据包号编码与解码</title>
      <link>/RFC9000_Chinese_Translation/Packet_Formats/17.1_Packet_Number_Encoding_and_Decoding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packet_Formats/17.1_Packet_Number_Encoding_and_Decoding/</guid>
      <description>数据包号是范围在0至262-1中的整数（第12.3章）。当在长包或短包的头部出现时 ，它们被编码在1至4字节中。通过仅使用数据包号的几个最低有效位，用于表示数据包号的比特位数量得以被减少。
经过编码的数据包号是受保护的，如《QUIC-TLS》第5.4章所述。
在接收到对于某数据包号空间的确认前，必须使用完整的数据包号；它不可以如下文所述那样被截断。
在接收到对于某数据包号空间的确认后，发送方必须使用一个足够大的数据包号尺寸，这个尺寸能够表示的范围大小至少是最大已确认数据包号和正在发送的数据包号之差的两倍。接收到该数据包的对端将正确解码数据包号，除非此包在传输过程中被延误得比很多更大编号的数据包更晚才被接收到。终端应该使用一个足够大的数据包号编码，使得即便此数据包比后续发送的数据包更晚到达，其数据包号也能被恢复。
于是，某数据包号编码的尺寸至少要比连续未被确认的数据包号的数量（包括此数据包本身）的以2为底的对数值大1比特。在附录A.2中可以找到数据包号编码的伪代码和一个样例。
在接收方一侧，数据包号的保护在恢复完整数据包号前被移除。完整的数据包号随后被重建，重建基于数据包中出现的包号有效比特位的数量和值，以及已接收的且成功认证的数据包中最大的数据包号。恢复完整的数据包号对于成功移除数据包保护很有必要。
一旦头部保护被移除，通过找到与下一个预期数据包更接近的数据包号值即可将数据包号解码。下一个预期数据包就是将最大的已接收数据包编号加上1。在附录A.3中可以找到数据包号解码的伪代码和一个样例。</description>
    </item>
    
    <item>
      <title>17.4 延迟自旋比特位</title>
      <link>/RFC9000_Chinese_Translation/Packet_Formats/17.4_Latency_Spin_Bit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packet_Formats/17.4_Latency_Spin_Bit/</guid>
      <description>为1-RTT数据包（第17.3.1章）定义的延迟自旋比特位允许网络路径上的各个观察点在整个连接期间进行被动的延迟监测。
自旋比特位仅在1-RTT数据包中出现，因为若要测量一条连接的初始RTT，可以通过观察握手过程来实现。因此，自旋比特位在版本协商和连接建立完成后才可用。《QUIC可管理性》中进一步讨论了延迟自旋比特位在链路上的测量和使用。
在本QUIC版本中，自旋比特位是一个可选特性。如下文所述，不支持此特性的终端必须禁用它。
每个终端对一条连接是否启用自旋比特位做单方面的决定。各个实现必须允许客户端和服务器的管理员能够禁用自旋比特位，要么全局禁用要么基于单条连接禁用。即使自旋比特位没有被管理员禁用，终端也必须在每16条网络路径中随机地选择至少一条，或每16个连接ID中选择一个，然后在使用这些选出的路径或连接ID时禁用自旋比特位，这是为了确保在网络上能经常观测到禁用自旋比特位的QUIC连接。当每个终端独立地禁用自旋比特位时，能确保自旋比特位信号量在大约八分之一的网络路径中是关闭的。
当自旋比特位被禁用时，终端可以将自旋比特位设置为任意值，且必须忽略任何传入值。推荐终端将自旋比特位设置为随机值，要么为每个数据包独立选择，要么为每个连接ID独立选择。
如果自旋比特位在当前连接中是启用的，终端就要为每条网络路径维护一个自旋值，并且当1-RTT数据包要在某条网络路径上发送时，将数据包头部中的自旋比特位设置为当前存储的自旋值。每个终端还要记录在每条路径上的对端所看到的最大数据包号。
当服务器在某条网络路径上接收到一个1-RTT数据包且它增大了服务器所记录的客户端看到的最大数据包号，服务器就将那条路径上的自旋值设置为接收到的那个数据包中的自旋值。
当客户端在某条网络路径上接收到一个1-RTT数据包且它增大了客户端所记录的服务器看到的最大数据包号，客户端就将那条路径上的自旋值设置为接收到的那个数据包中的自旋值的相反值。
当在一条网络路径上改变所使用的连接ID时，终端将那条网络路径上的自旋值重置为0。</description>
    </item>
    
  </channel>
</rss>
