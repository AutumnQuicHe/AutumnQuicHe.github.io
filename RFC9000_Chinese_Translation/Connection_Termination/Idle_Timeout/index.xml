<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>10.1 空闲超时 on AUTUMN QUICHE</title>
    <link>/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/</link>
    <description>Recent content in 10.1 空闲超时 on AUTUMN QUICHE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10.1.1 存活确认</title>
      <link>/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/10.1.1_Liveness_Testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/10.1.1_Liveness_Testing/</guid>
      <description>在临近正在生效的超时时间时发送数据包的终端需要承担数据包被对端丢弃的风险，因为在这些数据包到达之前，对端的空闲时间可能已经逾期。
如果对端可能距离超时所剩的时间不多了，例如不到一个PTO，那么终端可以发送一个Ping帧或其他引发确认的帧来测试连接是否存活，详见《QUIC恢复》的第6.2章。这在没有可用的应用数据以供安全地重发时尤其有用。注意，哪些数据可以安全地重发是由应用决定的。</description>
    </item>
    
    <item>
      <title>10.1.2 推迟空闲超时</title>
      <link>/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/10.1.2_Deferring_Idle_Timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Connection_Termination/Idle_Timeout/10.1.2_Deferring_Idle_Timeout/</guid>
      <description>如果终端正在等待响应数据但是没有或无法发送应用数据，那么终端可能需要发送ACK触发包以避免空闲超时。
QUIC实现可以向应用提供选项来推迟空闲超时。当应用希望避免丢失已经和一条连接关联的状态但不希望花时间重新交换应用数据，那么就可以使用这个选项。开启这个选项时，终端可以定期发送一个Ping帧（详见第19.2章），这会使得对端重置自己的空闲超时定时器。如果这包含Ping帧的数据包是自上一次接收到数据包后发送的第一个ACK触发包，那么发送这个包还会重置当前终端的空闲超时定时器。发送Ping帧会使得对端用确认来响应，这也会重置当前终端的空闲超时定时器。
使用QUIC的应用协议应该提供有关合适的推迟空闲超时的时机的指导。不必要地发送Ping帧可能对性能有负面影响。
如果一条连接上在一段超过用传输参数max_idle_timeout协商的时间内，没有数据包被发送或接收，那么这条连接会超时，详见第10章。然而，网络中间设备的状态可能比那个时间更早地超时。尽管《RFC4787》中的第5条要求推荐了每2分钟的超时间隔，但是经验表明至少要每30秒发送一次数据包才能避免大多数中间设备丢失有关UDP流量的状态，详见《GATEWAY》。</description>
    </item>
    
  </channel>
</rss>
