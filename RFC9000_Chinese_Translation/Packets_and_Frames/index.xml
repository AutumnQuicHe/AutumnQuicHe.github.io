<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>12. 数据包与帧 on Autumn Navigation</title>
    <link>/RFC9000_Chinese_Translation/Packets_and_Frames/</link>
    <description>Recent content in 12. 数据包与帧 on Autumn Navigation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language><atom:link href="/RFC9000_Chinese_Translation/Packets_and_Frames/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>12.1 受保护的数据包</title>
      <link>/RFC9000_Chinese_Translation/Packets_and_Frames/12.1_Protected_Packets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packets_and_Frames/12.1_Protected_Packets/</guid>
      <description>根据数据包类型不同，QUIC数据包具有不同级别的加密保护。有关数据包保护的细节，详见《QUIC-TLS》；本节对这种保护做了概述。
版本协商数据包没有加密保护，详见《QUIC不变量》。
重试数据包使用AEAD函数（带有关联数据的认证加密，详见《AEAD》）来保护数据包免于意外修改。
初始数据包也使用AEAD函数，函数的密钥是用一个在传输中对外界可见的值衍生出来的。因此初始数据包不具有有效的可信度保护。使用初始数据包保护是为了确保数据包发送方是存在于当前网络路径上的。任何接收到来自客户端的初始数据包的实体都能重建出一个密钥，这个密钥既能让它们读取数据包的内容，也可以让它们创建出能被任一终端认证成功的初始数据包。AEAD函数还保护初始数据包免于意外修改。
其他所有数据包都受衍生自加密握手的密钥保护。加密握手确保了只有正在交流的终端才能够接收到用于握手数据包、0-RTT数据包和1-RTT数据包的相应密钥。受0-RTT和1-RTT密钥保护的数据包具有强力的可信度和完整性保护。
某些数据包类型中出现的数据包号字段具有可替代的可信度保护，这种保护被用作头部保护的一部分，详见《QUIC-TLS》的第5.4章。在给定的数据包号空间中，受保护的数据包号会随着数据包的发送而增加，详见第12.3章。</description>
    </item>
    
    <item>
      <title>12.2 合并数据包</title>
      <link>/RFC9000_Chinese_Translation/Packets_and_Frames/12.2_Coalescing_Packets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packets_and_Frames/12.2_Coalescing_Packets/</guid>
      <description>初始数据包（详见第17.2.2章）、0-RTT数据包（第17.2.3章）和握手数据包（第17.2.4章）包含可以用来判断数据包末尾位置的长度字段。这个长度既包括数据包号字段也包括载荷字段，这两个字段都被可信地保护着的，一开始它们的长度都是未知的。但只要头部保护被移除，就能知道载荷字段的长度。
使用长度字段，发送方可以将数个QUIC数据包合并至单个UDP数据报中。这可以减少为了完成加密握手并开始发送数据所需的UDP数据报数量。这也可以被用于构造路径最大传输单元（PMTU）探测包，详见第14.4.1章。接收方必须有能力处理被合并的数据包。
用加密级别递增（初始、0-RTT、握手、1-RTT；详见《QUIC-TLS》的第4.1.4章）的顺序合并数据包更有可能使接收方有能力一次性处理所有数据包。具有短包头的数据包并不包含长度，所以它只能作为最后一个数据包被包含进UDP数据报中。如果多个帧将以相同的加密级别发送，那么终端应该将它们包含在单个数据包中，而不是合并多个相同加密级别的数据包。
接收方可以根据UDP数据报包含的第一个数据包的信息来做路由。发送方必须不将具有不同连接ID的QUIC数据包合并至单个UDP数据报中。如果后续的某个数据包的目标连接ID字段与数据报中第一个数据包的值不同，那么接收方应该忽略这个数据包。
任何被合并至单个UDP数据报的QUIC数据包都是独立且完整的。被合并的QUIC数据包的接收方必须独立处理每个QUIC数据包并单独确认它们，就好像它们是作为不同UDP数据报的载荷被接收的。例如，如果对一个数据包的解密失败了（因为密钥出于某个理由而不可用），那么接收方可以要么丢弃这个数据包要么缓存它以供将来处理，并且必须尝试处理余下的数据包。
重试数据包（详见第17.2.5章）、版本协商数据包（第17.2.1章）和具有短包头的数据包（第17.3章）并不包含长度字段，因此在同一个UDP数据报中不能有其他数据包跟在它们后面。还要注意，不存在将重试数据包和版本协商数据包与另一个数据包合并的情况。</description>
    </item>
    
    <item>
      <title>12.3 数据包号</title>
      <link>/RFC9000_Chinese_Translation/Packets_and_Frames/12.3_Packet_Numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packets_and_Frames/12.3_Packet_Numbers/</guid>
      <description>数据包号是范围在0至262-1中的整数。这个数值被用来为数据包保护决定加密随机值。每个终端为发送和接收分别维护单独的数据包号。
数据包号被限制在这个范围内是因为它们需要在ACK帧（详见第19.3章）的最大确认数字段中被完整表示。然而在长包头或短包头中表示时，数据包号被截断并被编码至1至4字节中，详见第17.1章。
版本协商数据包（详见第17.2.1章）和重试数据包（第17.2.5章）并不包含数据包号。
在QUIC中，数据包号被划分到三个空间里：
 初始空间（Initial space）：  所有初始数据包（详见第17.2.2章）都在这个空间中。
 握手空间（Handshake space）：  所有握手数据包（详见第17.2.4章）都在这个空间中。
 应用数据空间（Application data space）：  所有0-RTT数据包（详见第17.2.3章）和1-RTT数据包（第17.3.1章）都在这个空间中。
  如《QUIC-TLS》所述，每种数据包类型使用不同的保护密钥。
概念上，数据包号空间是数据包被处理和确认的上下文。初始数据包只能使用初始数据包保护密钥发送，也只能在初始数据包中被确认。类似地，握手数据包使用握手加密级别发送，且只能在握手数据包中被确认。
这样，在不同数据包号空间中发送的数据的加密得到了强制隔离。每个空间中的数据包号都从0开始。在相同数据包号空间中发送的后续数据包必须将数据包号增加至少1。
0-RTT数据和1-RTT数据出现在相同数据包号空间，是为了使得丢包检测算法在这两种数据包类型间更好实现。
在一条连接的同一个数据包号空间中，QUIC终端必须不重用数据包号。如果发送用的数据包号到达了262-1，发送方必须关闭连接但不发送任何连接关闭帧或更多数据包；终端可以发送一个无状态重置（详见第10.3章）以响应将来它接收到的数据包。
除非接收方确信它没有处理过另一个具有相同数据包号空间和数据包号的数据包，否则它必须丢弃眼前刚去除保护的数据包。出于在《QUIC-TLS》的第9.5章中所述的原因，必须在移除数据包保护后进行这个去除重复的步骤。
为了检测重复的目的而追踪一个个数据包的终端会面临状态数据不断扩容的风险。检测重复所需的数据可以通过维护一个最小的数据包号来限制，低于这个数据包号的数据包都会被立即丢弃。使用任何最小的数据包号时，都要考虑往返时间可能发生的大幅度变化，原因之一是对端可能用更大的往返时间来探测网络路径，详见第9章。
有关数据包号在发送方的编码和在接收方的解码，详见第17.1章。</description>
    </item>
    
    <item>
      <title>12.4 帧和帧类型</title>
      <link>/RFC9000_Chinese_Translation/Packets_and_Frames/12.4_Frames_and_Frame_Types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packets_and_Frames/12.4_Frames_and_Frame_Types/</guid>
      <description>如图11所示，移除数据包保护后的QUIC数据包，其载荷由一系列完整的帧组成。版本协商数据包、无状态重置数据包和重试数据包中不包含帧。
数据包载荷 { 帧 (8..) ..., } 图11：QUIC载荷
 包含帧的数据包载荷必须包含至少1个帧，可以包含多个帧和多种帧类型。终端必须将接收到不包含帧的数据包的情况视作类型为PROTOCOL_VIOLATION（协议违背）的连接错误。帧总是能被放进单个QUIC数据包中且不能横跨多个数据包。
任何帧的开头都是表明其类型的帧类型字段，后面跟着额外的与类型相关的字段：
帧 { 帧类型 (i), 与类型相关的字段 (..), } 图12：通用的帧结构
 表格3罗列并概述了有关本规范中定义的各种帧类型的信息。表格后是对于这份概述的描述。
   类型值 帧类型名称 定义 数据包类型 特殊规则     0x00 填充帧 第19.1章 IH01 NP   0x01 Ping帧 第19.2章 IH01    0x02-0x03 ACK帧 第19.3章 IH_1 NC   0x04 流重置帧 第19.4章 __01    0x05 停止发送帧 第19.5章 __01    0x06 加密帧 第19.</description>
    </item>
    
    <item>
      <title>12.5 帧和数据包号空间</title>
      <link>/RFC9000_Chinese_Translation/Packets_and_Frames/12.5_Frames_and_Number_Spaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/RFC9000_Chinese_Translation/Packets_and_Frames/12.5_Frames_and_Number_Spaces/</guid>
      <description>有一些类型的帧在某些数据包号空间中是被禁止的。这里的规则概述了TLS的规则，即与建立连接有关的帧通常能出现在任何数据包号空间的数据包中，而与传输数据有关的帧只能出现在应用数据空间中。
  填充帧、Ping帧和加密帧可以出现在任何数据包号空间中。
  标志着QUIC层错误（类型为0x1c）的连接关闭帧可以出现在任何数据包号空间中。标志着应用错误（类型为0x1d）的连接关闭帧必须只能出现在应用数据空间中。
  ACK帧可以出现在任何数据包号空间中，但是只能确认在同一个数据包号空间中的数据包。然而，如下文所述，0-RTT数据包不能包含ACK帧。
  所有其他类型的帧必须只能出现在应用数据空间中。
  注意，不管出于什么理由，都不能在0-RTT数据包中发送以下类型的帧：ACK帧、加密帧、握手完成帧、新令牌帧、回复通道帧和撤销连接ID帧。服务器可以将在0-RTT数据包中接收到以上帧的情况视作类型为PROTOCOL_VIOLATION的连接错误。</description>
    </item>
    
  </channel>
</rss>
